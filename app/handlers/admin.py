from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
from app.db.database import get_db
from app.services.codeforces import get_user_info


load_dotenv()

ADMINS = [int(x) for x in os.getenv("ADMINS", "").split(",") if x.strip()]
router = Router()


@router.message(Command("add_user"))
async def add_user(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    lines = message.text.strip().split("\n")[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (/add_user)
    if not lines:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                             "/add_user\n"
                             "handle1 –ò–º—è1 –§–∞–º–∏–ª–∏—è1\n"
                             "handle2 –ò–º—è2 –§–∞–º–∏–ª–∏—è2")
        return

    added = []
    skipped = []

    for line in lines:
        parts = line.strip().split(maxsplit=2)
        if len(parts) != 3:
            skipped.append(f"‚ùå {line} (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)")
            continue

        handle, first_name, last_name = parts

        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT 1 FROM users WHERE handle = ?", (handle,))
            if cursor.fetchone():
                skipped.append(f"‚ö†Ô∏è {handle} —É–∂–µ –µ—Å—Ç—å")
                continue

            cursor.execute("""
                INSERT INTO users (handle, first_name, last_name, is_admin)
                VALUES (?, ?, ?, 0)
            """, (handle, first_name, last_name))
            conn.commit()
            added.append(f"‚úÖ {handle}")

    lines = added + skipped
    await message.answer("\n".join(lines))


@router.message(Command("remove_user"))
async def remove_user(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.strip().split()[1:]
    if len(args) != 1:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_user <handle>")
        return

    handle = args[0]

    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT first_name, last_name FROM users WHERE handle = ?", (handle,))
        row = cursor.fetchone()

        if not row:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å handle <code>{handle}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
            return

        cursor.execute("DELETE FROM users WHERE handle = ?", (handle,))
        conn.commit()

    await message.answer(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{handle}</code> —É–¥–∞–ª—ë–Ω.", parse_mode="HTML")


@router.message(Command("update_ratings"))
async def update_ratings(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    interval = int(os.getenv("RATING_UPDATE_INTERVAL_MINUTES", "60"))
    now = datetime.utcnow()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT last_updated FROM ratings WHERE handle = '__last_update__'")
        row = cursor.fetchone()
        if row and row[0]:
            last_update_time = datetime.fromisoformat(row[0])
            if now - last_update_time < timedelta(minutes=interval):
                remaining = timedelta(minutes=interval) - (now - last_update_time)
                mins = int(remaining.total_seconds() // 60)
                await message.answer(
                    f"‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–∑ –≤ {interval} –º–∏–Ω—É—Ç.\n"
                    f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {mins} –º–∏–Ω."
                )
                return

    await message.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é —Ä–µ–π—Ç–∏–Ω–≥–∏...")

    changed_handles = set()
    updated_data = []

    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT u.telegram_id, u.first_name, u.last_name, h.handle
            FROM users u
            JOIN handles h ON u.telegram_id = h.user_id
        """)
        rows = cursor.fetchall()

    for telegram_id, first_name, last_name, handle in rows:
        try:
            info = await get_user_info(handle)
            new_rank = info.get("rank", "unrated")
            new_rating = info.get("rating", 0)

            with get_db() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT rank, rating FROM ratings WHERE handle = ?", (handle,))
                row = cursor.fetchone()

                if not row:
                    cursor.execute(
                        "INSERT INTO ratings (handle, rank, rating) VALUES (?, ?, ?)",
                        (handle, new_rank, new_rating)
                    )
                else:
                    old_rank, old_rating = row
                    if old_rank != new_rank and new_rating > old_rating:
                        changed_handles.add(handle)

                    cursor.execute(
                        "UPDATE ratings SET rank = ?, rating = ?, last_updated = CURRENT_TIMESTAMP WHERE handle = ?",
                        (new_rank, new_rating, handle)
                    )

                conn.commit()

            updated_data.append((handle, first_name, last_name, new_rank, new_rating))

        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å {handle}: {e}")

    if updated_data:
        lines = ["üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏:\n"]
        updated_data.sort(key=lambda x: x[4], reverse=True)

        for handle, fname, lname, rank, rating in updated_data:
            if handle in changed_handles:
                handle_str = f"<a href='https://codeforces.com/profile/{handle}'>{handle}</a>"
            else:
                handle_str = handle
            lines.append(f"üêä {handle_str} ‚Äî {lname} {fname} ‚Äî {rank} ({rating})")

        await message.answer("\n".join(lines), parse_mode="HTML")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO ratings (handle, rank, rating, last_updated)
            VALUES ('__last_update__', '', 0, ?)
            ON CONFLICT(handle) DO UPDATE SET last_updated=excluded.last_updated
        """, (now.isoformat(),))
        conn.commit()

    await message.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


@router.message(Command("list_users"))
async def list_users(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT first_name, last_name, handle
            FROM users
            WHERE telegram_id IS NOT NULL
            ORDER BY last_name, first_name
        """)
        rows = cursor.fetchall()

    if not rows:
        await message.answer("‚ùå –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        return

    lines = ["üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"]
    for first_name, last_name, handle in rows:
        lines.append(f"‚Ä¢ {last_name} {first_name} ‚Äî <code>{handle}</code>")

    await message.answer("\n".join(lines), parse_mode="HTML")


@router.message(Command("update_handle"))
async def update_handle(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.strip().split()[1:]
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /update_handle <—Å—Ç–∞—Ä—ã–π_handle> <–Ω–æ–≤—ã–π_handle>")
        return

    old_handle, new_handle = args

    with get_db() as conn:
        cursor = conn.cursor()

        # –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ old_handle
        cursor.execute("SELECT 1 FROM users WHERE handle = ?", (old_handle,))
        if not cursor.fetchone():
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å handle <code>{old_handle}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
            return

        # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –Ω–æ–≤—ã–π handle –µ—â—ë –Ω–µ –∑–∞–Ω—è—Ç
        cursor.execute("SELECT 1 FROM users WHERE handle = ?", (new_handle,))
        if cursor.fetchone():
            await message.answer(f"‚ö†Ô∏è Handle <code>{new_handle}</code> —É–∂–µ –∑–∞–Ω—è—Ç.", parse_mode="HTML")
            return

        cursor.execute(
            "UPDATE users SET handle = ? WHERE handle = ?",
            (new_handle, old_handle)
        )
        conn.commit()

    await message.answer(f"‚úÖ Handle —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω:\n<code>{old_handle}</code> ‚Üí <code>{new_handle}</code>", parse_mode="HTML")


@router.callback_query(F.data.startswith("approve:"))
async def handle_approve(callback: CallbackQuery):
    try:
        _, telegram_id_str, handle = callback.data.split(":")
        telegram_id = int(telegram_id_str)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.", show_alert=True)
        return

    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT first_name, last_name, telegram_id FROM users WHERE handle = ?", (handle,))
        row = cursor.fetchone()

        if not row:
            await callback.answer("‚ùå Handle –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.", show_alert=True)
            return

        first_name, last_name, existing_telegram_id = row

        if existing_telegram_id:
            await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.", show_alert=True)
            return

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º telegram_id
        cursor.execute("UPDATE users SET telegram_id = ? WHERE handle = ?", (telegram_id, handle))
        conn.commit()

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{last_name} {first_name}</b> —Å handle <code>{handle}</code> —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.",
        parse_mode="HTML"
    )

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await callback.bot.send_message(
            telegram_id,
            f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ Div2/3/4 —Ä–∞—É–Ω–¥–∞—Ö Codeforces."
        )
    except Exception:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    await callback.answer()


@router.callback_query(F.data.startswith("confirm_handle_update:"))
async def confirm_handle_update(callback: CallbackQuery):
    try:
        _, telegram_id_str, old_handle, new_handle = callback.data.split(":")
        telegram_id = int(telegram_id_str)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.", show_alert=True)
        return

    with get_db() as conn:
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id –∏ —Å—Ç–∞—Ä—ã–º handle —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute("""
            SELECT first_name, last_name FROM users 
            WHERE telegram_id = ? AND handle = ?
        """, (telegram_id, old_handle))
        row = cursor.fetchone()

        if not row:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ handle –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.", show_alert=True)
            return

        first_name, last_name = row

        # –û–±–Ω–æ–≤–ª—è–µ–º handle
        cursor.execute("""
            UPDATE users SET handle = ? WHERE telegram_id = ?
        """, (new_handle, telegram_id))
        conn.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await callback.message.edit_text(
        f"‚úÖ Handle –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{last_name} {first_name}</b> –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
        f"<code>{old_handle}</code> ‚Üí <code>{new_handle}</code>",
        parse_mode="HTML"
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await callback.bot.send_message(
            telegram_id,
            f"‚úÖ –í–∞—à handle –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
            f"<code>{old_handle}</code> ‚Üí <code>{new_handle}</code>"
        )
    except Exception:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    await callback.answer()
